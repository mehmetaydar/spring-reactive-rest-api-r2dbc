package com.usermanagement.reactive.test.controller;

import static org.junit.jupiter.api.Assertions.assertTrue;

import com.usermanagement.reactive.model.User;
import com.usermanagement.reactive.repository.UserRepository;
import java.util.Arrays;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
// import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

/** WebTestClient is used to test the Rest API */
@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class ApiTest {

  @Autowired private WebTestClient webTestClient;

  @Autowired private UserRepository userRepository;

  @Autowired private DatabaseClient databaseClient;

  private List<User> getData() {
    return Arrays.asList(
        new User(null, "Jordan Sun", 30, 10000, "jordansun@company.com"),
        new User(null, "Satoshi Nakamoto", 5, 1000, "satoshi@company.com"),
        new User(null, "Vitalik Bullet", 40, 1000000, "vitalik@company.com"),
        new User(null, "David Cameron", 20, 10000, "dcameron@company.com"),
        new User(null, "Albert Einstein", 55, 1000, "albeins@company.com"),
        new User(null, "Martin Mangan", 35, 1000000, "martman@company.com"),
        new User(null, "Felipe Melo", 40, 10000, "felipmelo@company.com"),
        new User(null, "Lionel Messi", 35, 1000, "liomes@company.com"),
        new User(null, "Christiano Ronaldo", 36, 1000000, "chrisr@company.com"),
        new User(null, "Wayne Rooney", 40, 10000, "rooney@company.com"),
        new User(null, "Diego Maradona", 50, 1000, "maradona@company.com"),
        new User(null, "Zehra Gunes", 25, 1000000, "zgunes@company.com"),
        new User(null, "Lebron James", 34, 10000, "ljames@company.com"),
        new User(null, "Michael Jordan", 60, 1000, "mjordan@company.com"),
        new User(null, "Bruma Randy", 45, 1000000, "brumarand@company.com"));
  }

  @BeforeEach
  public void setup() {
    List<String> statements =
        Arrays.asList(
            "DROP TABLE IF EXISTS users ;",
            "CREATE TABLE users ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL, age integer,salary decimal, email VARCHAR(150) NOT NULL, CONSTRAINT email_unique UNIQUE (email));");

    // statements.forEach(it -> databaseClient.execute(it)
    statements.forEach(it -> databaseClient.sql(it).fetch().rowsUpdated().block());

    userRepository
        .deleteAll()
        .thenMany(Flux.fromIterable(getData()))
        .flatMap(userRepository::save)
        .doOnNext(
            user -> {
              System.out.println("User Inserted from UserControllerTest: " + user);
            })
        .blockLast();
  }

  @Test
  public void getAllUsersValidateCount() {
    webTestClient
        .get()
        .uri("/v1/users")
        .exchange()
        .expectStatus()
        .isOk()
        .expectHeader()
        .contentType(MediaType.APPLICATION_JSON_VALUE)
        .expectBodyList(User.class)
        .hasSize(15)
        .consumeWith(
            user -> {
              List<User> users = user.getResponseBody();
              users.forEach(
                  u -> {
                    assertTrue(u.getId() != null);
                  });
            });
  }

  @Test
  public void getAllUsersValidateResponse() {
    Flux<User> userFlux =
        webTestClient
            .get()
            .uri("/v1/users")
            .exchange()
            .expectStatus()
            .isOk()
            .expectHeader()
            .contentType(MediaType.APPLICATION_JSON_VALUE)
            .returnResult(User.class)
            .getResponseBody();
    StepVerifier.create(userFlux.log("Receiving values !!!")).expectNextCount(15).verifyComplete();
  }

  @Test
  public void getUserById() {
    webTestClient
        .get()
        .uri("/v1/users".concat("/{userId}"), "1")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.name", "Jordan Sun");
  }

  @Test
  public void getUserById_NotFound() {
    webTestClient
        .get()
        .uri("/v1/users".concat("/{userId}"), "6000")
        .exchange()
        .expectStatus()
        .isNotFound();
  }

  @Test
  public void createUser() {
    User user = new User(null, "Aras Cruise", 45, 555555, "arascruise@company.com");
    webTestClient
        .post()
        .uri("/v1/users")
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isCreated()
        .expectBody()
        .jsonPath("$.id")
        .isNotEmpty()
        .jsonPath("$.name")
        .isEqualTo("Aras Cruise")
        .jsonPath("$.email")
        .isEqualTo("arascruise@company.com");
  }

  @Test
  public void deleteUser() {
    webTestClient
        .delete()
        .uri("/v1/users".concat("/{userId}"), "1")
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody(Void.class);
  }

  @Test
  public void updateUserSalary() {
    double newSalary = 12345;
    int userId = 1;
    User user = userRepository.findById(userId).block();
    user.setSalary(newSalary);

    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), userId)
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.salary")
        .isEqualTo(newSalary);
  }

  @Test
  public void updateUserName() {
    String newName = "Samona Dasel";
    int userId = 1;
    User user = userRepository.findById(userId).block();
    user.setName(newName);
    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), userId)
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.name")
        .isEqualTo(newName);
  }

  @Test
  public void updateUserEmail() {
    String newEmail = "modified_jordansun@company.com";
    int userId = 1;
    User user = userRepository.findById(userId).block();
    user.setEmail(newEmail);
    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), "1")
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.email")
        .isEqualTo(newEmail);
  }

  @Test
  public void updateUser_badEmail() {
    String newEmail = "not-a-valid-email-address";
    int userId = 1;
    User user = userRepository.findById(userId).block();
    user.setEmail(newEmail);
    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), userId)
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isBadRequest()
        .expectBody()
        .jsonPath("$.errors[0].defaultMessage")
        .isEqualTo("Email should be valid");
  }

  @Test
  public void updateUser_duplicateEmail() {
    String newEmail = "jordansun@company.com";
    int userId = 1;
    User user = userRepository.findById(userId).block();
    user.setEmail(newEmail);
    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), userId)
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectBody()
        .jsonPath("$.message", org.hamcrest.Matchers.is("duplicate key value"));
  }

  @Test
  public void updateUser_notFound() {
    double newsalary = 12345;
    User user = new User(null, "Jordan Sun", 31, newsalary, "jordansun@company.com");
    webTestClient
        .put()
        .uri("/v1/users".concat("/{userId}"), "6500")
        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
        .body(Mono.just(user), User.class)
        .exchange()
        .expectStatus()
        .isBadRequest();
  }

  @Test
  public void testPaginationAndSort() {
    webTestClient
        .get()
        .uri("/v1/users/all?page=1&size=5&sort=id;ASC,name;DESC")
        .exchange()
        .expectStatus()
        .isOk()
        .expectHeader()
        .contentType(MediaType.APPLICATION_JSON_VALUE)
        .expectBody()
        .jsonPath("$.content[0].id")
        .isEqualTo(6)
        .jsonPath("$.content[4].id")
        .isEqualTo(10)
        .jsonPath("$.totalPages")
        .isEqualTo(3)
        .jsonPath("$.numberOfElements")
        .isEqualTo(5)
        .jsonPath("$.totalElements")
        .isEqualTo(15)
        .jsonPath("$.sort.sorted")
        .isEqualTo(true);
  }

  @Test
  public void searchByEmailExactMatch() {
    webTestClient
        .get()
        .uri("/v1/users/search?email=Satoshi@company.com")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.[0].name", "Satoshi Nakamoto");
  }

  @Test
  public void searchByNamePrefix() {
    webTestClient
        .get()
        .uri("/v1/users/search?name=Satoshi   N")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.[0].email", "satoshi@company.com");
  }

  @Test
  public void searchByEmailOrName() {
    webTestClient
        .get()
        .uri("/v1/users/search?email=Satoshi@company.com&name=Lebr")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody()
        .jsonPath("$.[0].name")
        .isEqualTo("Satoshi Nakamoto")
        .jsonPath("$.[1].name")
        .isEqualTo("Lebron James");
  }
}
