package com.reactive.examples.test.controller;

import com.reactive.examples.model.User;
import com.reactive.examples.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.hamcrest.core.Is;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * WebTestClient is used to test the Rest API
 */

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class UserControllerTest {

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private UserRepository userRepository;


    @Autowired
    private DatabaseClient databaseClient;


    private List<User> getData(){
        return Arrays.asList(new User(null,"Suman Das",30,10000, "sumandas@company.com"),
                new User(null,"Arjun Das",5,1000, "arjundas@company.com"),
                new User(null,"Saurabh Ganguly",40,1000000, "sganguly@company.com"));
    }

    @BeforeEach
    public  void setup(){
        List<String> statements = Arrays.asList("DROP TABLE IF EXISTS users ;",
                "CREATE TABLE users ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL, age integer,salary decimal, email VARCHAR(150) NOT NULL, CONSTRAINT email_unique UNIQUE (email));");

        statements.forEach(it -> databaseClient.execute(it)
                .fetch()
                .rowsUpdated()
                .block());

        userRepository.deleteAll()
                .thenMany(Flux.fromIterable(getData()))
                .flatMap(userRepository::save)
                .doOnNext(user ->{
                    System.out.println("User Inserted from UserControllerTest: " + user);
                })
                .blockLast();

    }

    @Test
    public void getAllUsersValidateCount(){
        webTestClient.get().uri("/users").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .expectBodyList(User.class)
                .hasSize(3)
                .consumeWith(user ->{
                    List<User> users = user.getResponseBody();
                    users.forEach( u ->{
                        assertTrue(u.getId() != null);
                    });
                });
    }
    @Test
    public void getAllUsersValidateResponse(){
        Flux<User> userFlux = webTestClient.get().uri("/users").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .returnResult(User.class)
                .getResponseBody();
        StepVerifier.create(userFlux.log("Receiving values !!!"))
                .expectNextCount(3)
                .verifyComplete();

    }
    @Test
    public void getUserById(){
        webTestClient.get().uri("/users".concat("/{userId}"),"1")
                            .exchange().expectStatus().isOk()
                            .expectBody()
                            .jsonPath("$.name","Suman Das");
    }
    @Test
    public void getUserById_NotFound(){
        webTestClient.get().uri("/users".concat("/{userId}"),"6")
                .exchange().expectStatus().isNotFound();
    }
    @Test
    public void createUser(){
        User user = new User(null,"Rahul Dravid",45,5555555, "rdravid@company.com");
        webTestClient.post().uri("/users").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                            .body(Mono.just(user),User.class)
                            .exchange()
                            .expectStatus().isCreated()
                            .expectBody()
                            .jsonPath("$.id").isNotEmpty()
                            .jsonPath("$.name").isEqualTo("Rahul Dravid")
                            .jsonPath("$.email").isEqualTo("rdravid@company.com");
    }
    @Test
    public void deleteUser(){
        webTestClient.delete().uri("/users".concat("/{userId}"),"1")
                     .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                     .exchange()
                     .expectStatus().isOk()
                     .expectBody(Void.class);
    }
    @Test
    public void updateUserSalary(){
        double newSalary = 12345;
        int userId = 1;
        User user = userRepository.findById(userId).block();
        user.setSalary(newSalary);

        webTestClient.put().uri("/users".concat("/{userId}"),userId)
                        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                        .body(Mono.just(user),User.class)
                        .exchange()
                        .expectStatus().isOk()
                        .expectBody()
                        .jsonPath("$.salary").isEqualTo(newSalary);
    }
    @Test
    public void updateUserName(){
        String newName = "Samona Dasel";
        int userId = 1;
        User user = userRepository.findById(userId).block();
        user.setName(newName);
        webTestClient.put().uri("/users".concat("/{userId}"),userId)
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(user),User.class)
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .jsonPath("$.name").isEqualTo(newName);
    }
    @Test
    public void updateUserEmail(){
        String newEmail = "modified_sumandas@company.com";
        int userId = 1;
        User user = userRepository.findById(userId).block();
        user.setEmail(newEmail);
        webTestClient.put().uri("/users".concat("/{userId}"),"1")
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(user),User.class)
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .jsonPath("$.email").isEqualTo(newEmail);
    }

    @Test
    public void updateUser_badEmail(){
        String newEmail = "not-a-valid-email-address";
        int userId = 1;
        User user = userRepository.findById(userId).block();
        user.setEmail(newEmail);
        webTestClient.put().uri("/users".concat("/{userId}"),userId)
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(user),User.class)
                .exchange()
                .expectStatus().isBadRequest()
                .expectBody()
                .jsonPath("$.errors[0].defaultMessage").isEqualTo("Email should be valid");
    }

    @Test
    public void updateUser_duplicateEmail(){
        String newEmail = "sganguly@company.com";
        int userId = 1;
        User user = userRepository.findById(userId).block();
        user.setEmail(newEmail);
        webTestClient.put().uri("/users".concat("/{userId}"),userId)
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(user),User.class)
                .exchange()
                .expectBody()
                .jsonPath("$.message", org.hamcrest.Matchers.is("duplicate key value"));
    }

    @Test
    public void updateUser_notFound(){
        double newsalary = 12345;
        User user = new User(null,"Suman Das",31,newsalary, "sumandas@company.com");
        webTestClient.put().uri("/users".concat("/{userId}"),"6")
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(user),User.class)
                .exchange()
                .expectStatus().isBadRequest();
    }
}
